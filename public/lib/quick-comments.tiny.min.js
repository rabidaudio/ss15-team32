riot.tag("comment",'<div class="qc-comment" id="comment/{id}"> <div class="avatar"> <a href="{author.url}"><img src="{author.avatar}"></a> </div> <div class="qc-header"> <a href="{author.url}" class="{author:1, text-muted:b}">{author.name}</a> |  <a href="#comment/{id}" class="{timestamp:1, text-muted:b}" title="{new Date(opts.data.time).toLocaleString()}">{vagueTime}</a> <a href="#" role="button" class="{edit:1, text-muted:b}" if="{false}">Edit</a> </div> <div class="qc-body"> <p each="{p in paragraphs}">{p}</p> </div> <hr></hr> </div>',function(a){this.id=a.data.id,this.author=a.data.author,this.parent.parent.opts.meow&&(a.data.body=a.data.body.replace(/[A-Za-z]+/g,"meow")),this.paragraphs=a.data.body.split(/\n+/);var b=b||!1;this.vagueTime=b?b.get({to:a.data.time}):new Date(a.data.time).toLocaleString(),this.b=this.parent.parent.opts.bootstrap}),riot.tag("newcomment",'<div class="qc-comment qc-new"> <fieldset>      <textarea __disabled="{parent.Auth.loggedIn() ? undefined : true}" rows="{height}" class="{gc-new-body:1, form-control:b}" name="body" onfocus="{grow}" onblur="{shrink}" onkeydown="{update}" placeholder="{parent.Auth.loggedIn() ? \'Leave a comment\' : \'Sign in to post a comment.\'}"></textarea>\n <div class="qc-user qc-logged-in" if="{parent.Auth.loggedIn()}"> <p>Logged in as {parent.Auth.currentUser().name} (via {capitalize(parent.Auth.currentUser().provider)}). <a href="#" role="button" onclick="{logout}"> Log out or switch accounts</a> </p> </div> <div class="{qc-signin:1, input-group-btn:b}" if="{!parent.Auth.loggedIn() || b}"> <button class="{qc-logged-out:1, btn:b, btn-default:b, dropdown-toggle:b}" data-toggle="dropdown" if="{!parent.Auth.loggedIn() && b}">Sign in<span class="caret"></span></button> <span if="{!b}">Sign in:</span> <ul class="{qc-login-opts:1, dropdown-menu:b, dropdown-menu-right:b}" role="menu"> <li each="{name, val in parent.Auth.providers}" if="{val.available}"> <a href="#" role="button" onclick="{parent.login}" class="provider {name}">{parent.capitalize(name)}</a> </li> </ul> </div> <button __disabled="{this.body.value.length ? undefined : true}" class="{submit:1, btn:b, btn-primary:b}" name="submit" onclick="{send}" if="{parent.Auth.loggedIn()}">Submit</button> </fieldset> <hr></hr> </div>',function(){this.height=1,this.b=this.parent.opts.bootstrap,this.send=function(){if(!this.spamFree())throw"Can't save spammy comments";this.body.value.length&&(this.parent.save(this),this.body.value="",this.shrink())}.bind(this),this.spamFree=function(){return!0}.bind(this),this.grow=function(){this.height=5}.bind(this),this.shrink=function(){this.body.value.length<1&&(this.height=1)}.bind(this),this.login=function(a){this.parent.Auth.login(a.item.name)}.bind(this),this.logout=function(){this.parent.Auth.logout()}.bind(this),this.change=function(){this.update()}.bind(this),this.parent.Auth.on("login logout",this.change),this.capitalize=function(a){return a.split(" ").map(function(a){var b=a.split("");return b.unshift(b.shift().toUpperCase()),b.join("")}).join(" ")}.bind(this)}),riot.tag("qcomment",'<style name="core"></style> <h2>Comments ({comments.length})</h2> <newcomment></newcomment> <div class="qc-comments"> <comment each="{comments}" data="{this}"></comment> </div>',function(a){this.providers=a.providers,this.pageID=a.pageID,this.firebase=a.firebase,this.Auth=a.Auth,this.dataset=this.firebase.child("comments").child(this.pageID),this.comments=[],this.save=function(b){if(!a.Auth.currentUser())throw"Must be logged in to comment";this.dataset.push({author:this.Auth.currentUser(),time:Date.now(),body:b.body.value})}.bind(this),this.getComment=function(a){var b=a.val();return b.id=a.key(),b}.bind(this),this.addComment=function(a){var b=this.getComment(a);return this.comments.unshift(b),this.update()}.bind(this),this.updateComment=function(a){for(var b=this.getComment(a),c=this.comments.length;c-->0;)if(this.comments[c].id===b.id)return this.comments[c]=b,this.update()}.bind(this),this.removeComment=function(a){for(var b=this.getComment(a),c=this.comments.length;c-->0;)if(this.comments[c].id===b.id)return this.comments.splice(c,1),this.update()}.bind(this);var b=this.dataset.orderByChild("time").limitToFirst(a.limit);b.on("child_added",this.addComment),b.on("child_changed",this.updateComment),b.on("child_removed",this.removeComment),this.core.innerText=".qc-header {overflow: hidden;}.qc-body {overflow: hidden;}.qc-new textarea {width: 100%;}.avatar img {max-width: 5em;}"});var QC=function(a){function b(b,c){a.observable(this),this.providers=c,this.currentUser=function(){var a=b.getAuth();if(!a)return null;var c=a[a.provider].cachedUserProfile,d={};switch(d.name=a[a.provider].displayName,d.uid=a.uid,d.provider=a.provider,a.provider){case"facebook":d.avatar=c.picture.data.url,d.url=c.link;break;case"twitter":d.avatar=c.profile_image_url,d.url="http://twitter.com/"+c.screen_name;break;case"github":d.avatar=c.avatar_url,d.url=c.html_url;break;case"google":d.avatar=c.picture,d.url=c.link}return d},this.loggedIn=function(){return!!b.getAuth()};var d=this;b.onAuth(function(a){return a?(b.child("users").child(a.uid).set(a),d.trigger("login",a)):d.trigger("logout")}),this.login=function(a){if(this.currentUser())throw"Already logged in";var c=this.providers[a];if(!c||c.available===!1)throw"Provider unavailable";b[c.type||"authWithOAuthPopup"](a,function(a){if(a)throw a})},this.logout=function(){b.unauth()}}var c={facebook:{available:!0},github:{available:!0},twitter:{available:!0},google:{available:!0},password:{type:"authWithPassword",available:!1},anonymous:{type:"authAnonymously",available:!1},custom:{type:"authWithCustomToken",available:!1}};return function(d){if(!d.firebase)throw"Firebase is required";d.pageID=encodeURIComponent(d.pageID||window.location.pathname).replace(".","-"),d.limit=d.limit>0?d.limit:100;for(var e in d.authMethods)d.authMethods.hasOwnProperty(e)&&!d.authMethods[e]&&c.hasOwnProperty(e)&&(c[e].available=!1);d.Auth=new b(d.firebase,c),a.mount("qcomment",d)}}(riot);