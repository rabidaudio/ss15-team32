riot.tag("comment",'<div class="qc-comment" name="{ opts.data.id }"> <div class="qc-body">{ opts.data.body }</div> <div class="qc-author"> <a href="mailto:{ opts.data.author.email }">{ opts.data.author.name }</a> </div> <hr></hr> </div>',function(){}),riot.tag("newcomment",'<div class="qc-comment qc-new"> <div class="qc-user qc-logged-out"> <p>Sign in to post a comment.</p> <ul class="qc-login-opts"> <li each="{ parent.providers }"> <a href="#" class="provicer-{ name }" onclick="{ login }">{ name }</a> </li> </ul> </div> <form>      <textarea rows="{ height }" class="gc-new-body form-control" name="body" onfocus="{ grow }"></textarea>\n <button class="submit" name="submit" onclick="{ send }">Submit</button> </form> <hr></hr> </div>',function(){this.height=1,this.send=function(){if(!this.spamFree)throw"Can't save spammy comments";this.parent.save(this)}.bind(this),this.spamFree=function(){return!0}.bind(this),this.grow=function(){this.height=5}.bind(this)}),riot.tag("qcommentcontainer",'<div class="qc-comments"> <newcomment></newcomment> <comment each="{ comments }" data="{ this }"></comment> </div>',function(a){this.providers=a.providers,this.pageID=a.pageID,this.FB=a.FB,this.comments=[],this.user={name:"bob",email:"abc@123.xyz"},this.dataset=this.FB.child("comments").child(this.pageID),this.updateComments=function(a){var b=a.val();b.id=a.key(),this.comments.push(b),this.update()}.bind(this),this.save=function(a){this.dataset.push({author:this.user,time:(new Date).toISOString(),body:a.body.value})}.bind(this),this.dataset.on("child_added",this.updateComments)});var QC=function(a,b){if(!a)throw"Riot.js is required";if(!b)throw"Firebase is required";return function(c){a.mount("qcommentcontainer",{FB:new b(c.firebase),pageID:c.pageID||encodeURIComponent(window.location.pathname),providers:[{name:"facebook",login:function(){console.log("yay!")}}]})}}(riot,Firebase);new QC({firebase:"cjk-blog.firebaseio.com",pageID:"bootstrap"});