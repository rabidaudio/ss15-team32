riot.tag("auth",'<ul class="qc-login-opts"> <li each="{ name, val in providers }" if="{ val.available }"> <provider data="{ name }"></provider> </li> </ul>',function(){this.providers={facebook:{type:"oauth",available:!0},github:{type:"oauth",available:!0},twitter:{type:"oauth",available:!1}},this.login=function(a){this.parent.FB.authWithOAuthPopup(a,this.authHandler)}.bind(this),this.authHandler=function(a){if(a)throw a}.bind(this)}),riot.tag("comment",'<div class="qc-comment" name="{ opts.data.id }"> <div class="qc-body">{ opts.data.body }</div> <div class="qc-author"> <a href="mailto:{ opts.data.author.email }">{ opts.data.author.name }</a> </div> <hr></hr> </div>',function(){}),riot.tag("newcomment",'<div class="qc-comment qc-new"> <div class="qc-user qc-logged-out" if="{ !parent.user }"> <p>Sign in to post a comment.</p> <ul class="qc-login-opts"> <li each="{ parent.providers }"> <a href="#" class="provicer-{ name }" onclick="{ login }">{ name }</a> </li> </ul> </div> <div class="qc-user qc-logged-in" if="{ parent.user }"> { parent.user.name } </div> <form>      <textarea rows="{ height }" class="gc-new-body form-control" name="body" onfocus="{ grow }"></textarea>\n <button class="submit" name="submit" onclick="{ send }">Submit</button> </form> <hr></hr> </div>',function(){this.height=1,this.send=function(){if(!this.spamFree)throw"Can't save spammy comments";this.parent.save(this),this.body.value="",this.shrink()}.bind(this),this.spamFree=function(){return!0}.bind(this),this.grow=function(){this.height=5}.bind(this),this.shrink=function(){this.height=1}.bind(this)}),riot.tag("provider",'<a href="#" onclick="{ login }" class="provider-{ opts.data }">{ opts.data }</a>',function(){this.login=function(){this.parent.parent.login(this.opts.data)}.bind(this)}),riot.tag("qcommentcontainer",'<div class="qc-comments"> <auth></auth> <newcomment></newcomment> <comment each="{ comments }" data="{ this }"></comment> </div>',function(a){this.providers=a.providers,this.pageID=a.pageID,this.FB=a.FB,this.dataset=this.FB.child("comments").child(this.pageID),this.comments=[],this.currentUser=function(){var a=this.FB.getAuth();if(!a)return null;var b={};switch(a.provider){case"github":}return b.auth=a,b}.bind(this),this.save=function(a){if(!this.currentUser())throw"Must be logged in to comment";this.dataset.push({author:this.currentUser(),time:Date.now(),body:a.body.value})}.bind(this),this.getComment=function(a){var b=a.val();return b.id=a.key(),b}.bind(this),this.addComment=function(a){var b=this.getComment(a);return this.comments.unshift(b),this.update()}.bind(this),this.updateComment=function(a){for(var b=this.getComment(a),c=this.comments.length;c-->0;)if(this.comments[c].id===b.id)return this.comments[c]=b,this.update()}.bind(this),this.removeComment=function(a){for(var b=this.getComment(a),c=this.comments.length;c-->0;)if(this.comments[c].id===b.id)return this.comments.splice(c,1),this.update()}.bind(this);var b=this.dataset.orderByChild("time").limitToFirst(a.limit>0?a.limit:100);b.on("child_added",this.addComment),b.on("child_changed",this.updateComment),b.on("child_removed",this.removeComment)});var QC=function(a){if(!a)throw"Riot.js is required";return function(b){a.mount("qcommentcontainer",{FB:b.firebase,pageID:encodeURIComponent(b.pageID||window.location.pathname)})}}(riot);