riot.tag("auth",'<div class="qc-user qc-logged-in" if="{ loggedIn }"> <p>Logged in. <a href="#" onclick="{ logout }">Log out</a></p> </div> <div if="{ loggedIn }"> <newcomment></newcomment> </div> <div class="qc-user qc-logged-out" if="{ !loggedIn }"> <p>Sign in to post a comment.</p> <ul class="qc-login-opts"> <li each="{ name, val in providers }" if="{ val.available }"> <provider data="{ name }"></provider> </li> </ul> </div>',function(){this.providers=this.opts.data,this.loggedIn=!!this.parent.currentUser();var a=this.parent.firebase;this.login=function(b){a.authWithOAuthPopup(b,this.authHandler)}.bind(this),this.logout=function(){a.unauth(),this.loggedIn=!1}.bind(this),this.authHandler=function(b,c){return b?void console.error(b):(a.child("users").child(c.uid).set(c),this.loggedIn=!0,void this.update())}.bind(this)}),riot.tag("comment",'<div class="qc-comment" name="{ opts.data.id }"> <div class="qc-body">{ opts.data.body }</div> <div class="qc-author"> <div class="avatar"> </div> <a href="{ opts.data.author.url }">{ opts.data.author.name }</a> </div> <hr></hr> </div>',function(){}),riot.tag("newcomment",'<div class="qc-comment qc-new"> <form>      <textarea rows="{ height }" class="gc-new-body form-control" name="body" onfocus="{ grow }"></textarea>\n <button class="submit" name="submit" onclick="{ send }">Submit</button> </form> <hr></hr> </div>',function(){this.height=1,this.send=function(){if(!this.spamFree)throw"Can't save spammy comments";this.parent.save(this),this.body.value="",this.shrink()}.bind(this),this.spamFree=function(){return!0}.bind(this),this.grow=function(){this.height=5}.bind(this),this.shrink=function(){this.height=1}.bind(this)}),riot.tag("provider",'<a href="#" onclick="{ login }" class="provider-{ opts.data }">{ opts.data }</a>',function(){this.login=function(){this.parent.parent.login(this.opts.data)}.bind(this)}),riot.tag("qcommentcontainer",'<div class="qc-comments"> <auth data="{ opts.providers }"></auth> <comment each="{ comments }" data="{ this }"></comment> </div>',function(a){this.providers=a.providers,this.pageID=a.pageID,this.firebase=a.firebase,this.dataset=this.firebase.child("comments").child(this.pageID),this.comments=[],this.currentUser=function(){var a=this.firebase.getAuth();if(!a)return null;var b=a[a.provider].cachedUserProfile,c={};switch(c.name=a[a.provider].displayName,c.uid=a.uid,a.provider){case"facebook":c.avatar=b.picture.data.url,c.url=b.link;break;case"twitter":c.avatar=b.profile_image_url,c.url=b.url;break;case"github":c.avatar=b.avatar_url,c.url=b.html_url}return c}.bind(this),this.save=function(a){if(!this.currentUser())throw"Must be logged in to comment";this.dataset.push({author:this.currentUser(),time:Date.now(),body:a.body.value})}.bind(this),this.getComment=function(a){var b=a.val();return b.id=a.key(),b}.bind(this),this.addComment=function(a){var b=this.getComment(a);return this.comments.unshift(b),this.update()}.bind(this),this.updateComment=function(a){for(var b=this.getComment(a),c=this.comments.length;c-->0;)if(this.comments[c].id===b.id)return this.comments[c]=b,this.update()}.bind(this),this.removeComment=function(a){for(var b=this.getComment(a),c=this.comments.length;c-->0;)if(this.comments[c].id===b.id)return this.comments.splice(c,1),this.update()}.bind(this);var b=this.dataset.orderByChild("time").limitToFirst(a.limit>0?a.limit:100);b.on("child_added",this.addComment),b.on("child_changed",this.updateComment),b.on("child_removed",this.removeComment)});var QC=function(a){if(!a)throw"Riot.js is required";var b={facebook:{type:"oauth",available:!0},github:{type:"oauth",available:!0},twitter:{type:"oauth",available:!0},google:{type:"oauth",available:!0},password:{available:!1},anonymous:{available:!1}};return function(c){if(c.pageID=encodeURIComponent(c.pageID||window.location.pathname),!c.firebase)throw"Firebase is required";for(var d in c.authMethods)c.authMethods.hasOwnProperty(d)&&b.hasOwnProperty(d)&&(b[d].available=c.authMethods[d]);c.providers=b,a.mount("qcommentcontainer",c)}}(riot);